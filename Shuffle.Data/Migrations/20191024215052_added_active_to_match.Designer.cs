// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shuffle.Data;

namespace Shuffle.Data.Migrations
{
    [DbContext(typeof(ShuffleDbContext))]
    [Migration("20191024215052_added_active_to_match")]
    partial class added_active_to_match
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shuffle.Data.Entities.MatchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("ChallengerId");

                    b.Property<int?>("ChallengerScore");

                    b.Property<DateTime>("MatchDate");

                    b.Property<int?>("OppositionId");

                    b.Property<int?>("OppositionScore");

                    b.Property<int>("RulesetId");

                    b.HasKey("Id");

                    b.HasIndex("ChallengerId");

                    b.HasIndex("OppositionId");

                    b.HasIndex("RulesetId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("Shuffle.Data.Entities.RulesetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Ruleset");
                });

            modelBuilder.Entity("Shuffle.Data.Entities.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Shuffle.Data.Entities.TeamRecordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Elo");

                    b.Property<int>("Losses");

                    b.Property<int>("RulesetId");

                    b.Property<int>("TeamId");

                    b.Property<int>("Wins");

                    b.HasKey("Id");

                    b.HasIndex("RulesetId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamRecord");
                });

            modelBuilder.Entity("Shuffle.Data.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<string>("FcmToken");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Shuffle.Data.Entities.UserTeamEntity", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("Shuffle.Data.Entities.MatchEntity", b =>
                {
                    b.HasOne("Shuffle.Data.Entities.TeamEntity", "Challenger")
                        .WithMany("ChallengerMatches")
                        .HasForeignKey("ChallengerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shuffle.Data.Entities.TeamEntity", "Opposition")
                        .WithMany("OppositionMatches")
                        .HasForeignKey("OppositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shuffle.Data.Entities.RulesetEntity", "Ruleset")
                        .WithMany("Matches")
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shuffle.Data.Entities.TeamRecordEntity", b =>
                {
                    b.HasOne("Shuffle.Data.Entities.RulesetEntity", "Ruleset")
                        .WithMany("TeamRecords")
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shuffle.Data.Entities.TeamEntity", "Team")
                        .WithMany("TeamRecords")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Shuffle.Data.Entities.UserTeamEntity", b =>
                {
                    b.HasOne("Shuffle.Data.Entities.TeamEntity", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Shuffle.Data.Entities.UserEntity", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
